// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/grpc/fedi_instance.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FediInstanceClient is the client API for FediInstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FediInstanceClient interface {
	GetFediInstance(ctx context.Context, in *GetFediInstanceRequest, opts ...grpc.CallOption) (*GetFediInstanceReply, error)
}

type fediInstanceClient struct {
	cc grpc.ClientConnInterface
}

func NewFediInstanceClient(cc grpc.ClientConnInterface) FediInstanceClient {
	return &fediInstanceClient{cc}
}

func (c *fediInstanceClient) GetFediInstance(ctx context.Context, in *GetFediInstanceRequest, opts ...grpc.CallOption) (*GetFediInstanceReply, error) {
	out := new(GetFediInstanceReply)
	err := c.cc.Invoke(ctx, "/feditools.login.fedi_instance.FediInstance/GetFediInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FediInstanceServer is the server API for FediInstance service.
// All implementations must embed UnimplementedFediInstanceServer
// for forward compatibility
type FediInstanceServer interface {
	GetFediInstance(context.Context, *GetFediInstanceRequest) (*GetFediInstanceReply, error)
	mustEmbedUnimplementedFediInstanceServer()
}

// UnimplementedFediInstanceServer must be embedded to have forward compatible implementations.
type UnimplementedFediInstanceServer struct {
}

func (UnimplementedFediInstanceServer) GetFediInstance(context.Context, *GetFediInstanceRequest) (*GetFediInstanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFediInstance not implemented")
}
func (UnimplementedFediInstanceServer) mustEmbedUnimplementedFediInstanceServer() {}

// UnsafeFediInstanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FediInstanceServer will
// result in compilation errors.
type UnsafeFediInstanceServer interface {
	mustEmbedUnimplementedFediInstanceServer()
}

func RegisterFediInstanceServer(s grpc.ServiceRegistrar, srv FediInstanceServer) {
	s.RegisterService(&FediInstance_ServiceDesc, srv)
}

func _FediInstance_GetFediInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFediInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FediInstanceServer).GetFediInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feditools.login.fedi_instance.FediInstance/GetFediInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FediInstanceServer).GetFediInstance(ctx, req.(*GetFediInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FediInstance_ServiceDesc is the grpc.ServiceDesc for FediInstance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FediInstance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feditools.login.fedi_instance.FediInstance",
	HandlerType: (*FediInstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFediInstance",
			Handler:    _FediInstance_GetFediInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/fedi_instance.proto",
}
