// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/grpc/fedi_account.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FediAccountClient is the client API for FediAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FediAccountClient interface {
	GetFediAccount(ctx context.Context, in *GetFediAccountRequest, opts ...grpc.CallOption) (*GetFediAccountReply, error)
}

type fediAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewFediAccountClient(cc grpc.ClientConnInterface) FediAccountClient {
	return &fediAccountClient{cc}
}

func (c *fediAccountClient) GetFediAccount(ctx context.Context, in *GetFediAccountRequest, opts ...grpc.CallOption) (*GetFediAccountReply, error) {
	out := new(GetFediAccountReply)
	err := c.cc.Invoke(ctx, "/feditools.login.fedi_account.FediAccount/GetFediAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FediAccountServer is the server API for FediAccount service.
// All implementations must embed UnimplementedFediAccountServer
// for forward compatibility
type FediAccountServer interface {
	GetFediAccount(context.Context, *GetFediAccountRequest) (*GetFediAccountReply, error)
	mustEmbedUnimplementedFediAccountServer()
}

// UnimplementedFediAccountServer must be embedded to have forward compatible implementations.
type UnimplementedFediAccountServer struct {
}

func (UnimplementedFediAccountServer) GetFediAccount(context.Context, *GetFediAccountRequest) (*GetFediAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFediAccount not implemented")
}
func (UnimplementedFediAccountServer) mustEmbedUnimplementedFediAccountServer() {}

// UnsafeFediAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FediAccountServer will
// result in compilation errors.
type UnsafeFediAccountServer interface {
	mustEmbedUnimplementedFediAccountServer()
}

func RegisterFediAccountServer(s grpc.ServiceRegistrar, srv FediAccountServer) {
	s.RegisterService(&FediAccount_ServiceDesc, srv)
}

func _FediAccount_GetFediAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFediAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FediAccountServer).GetFediAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feditools.login.fedi_account.FediAccount/GetFediAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FediAccountServer).GetFediAccount(ctx, req.(*GetFediAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FediAccount_ServiceDesc is the grpc.ServiceDesc for FediAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FediAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feditools.login.fedi_account.FediAccount",
	HandlerType: (*FediAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFediAccount",
			Handler:    _FediAccount_GetFediAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/fedi_account.proto",
}
